type Query {
  getDJSession(id: ID!): DJSession
  getPlaylist(id: ID!): Playlist
  getSong(id: ID!): Song
}

type Mutation {
  startDJSession(djName: String!, playlistID: ID!): DJSession
  endDJSession(id: ID!): DJSession
  createPlaylist(name: String!): Playlist
  addSongToPlaylist(playlistID: ID!, title: String!, artist: String!, url: String!): Song
}

type Subscription {
  onDJSessionLive(id: ID!): DJSession
    @aws_subscribe(mutations: ["startDJSession", "endDJSession"])
}

type Playlist @model
  @auth(rules: [{ allow: public, operations: [create, read, update, delete] }]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
}

type Song @model
  @auth(rules: [{ allow: public, operations: [create, read, update, delete] }]) {
  id: ID!
  title: String!
  artist: String
  url: String!
  playlistID: ID!
}

type DJSession @model
  @auth(rules: [{ allow: public, operations: [create, read, update, delete] }]) {
  id: ID!
  djName: String!
  playlistID: ID!
  isLive: Boolean!
  startTime: AWSDateTime!
  endTime: AWSDateTime
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
